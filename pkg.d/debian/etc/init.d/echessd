#! /bin/sh
### BEGIN INIT INFO
# Provides:          echessd
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Internet Chess Server
# Description:       Minimalistic and lightweight ICS implementation
#                    written on Erlang programming language.
### END INIT INFO

# Author: Aleksey Morarash <aleksey.morarash@gmail.com>
#
# Please remove the "Author" lines above and replace them
# with your own name if you copy and modify this script.

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Internet Chess Server"
NAME=echessd
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
    # Return
    #   0 if daemon has been started
    #   1 if daemon was already running
    #   2 if daemon could not be started
    su --login --command \
        'erl -sname "echessd" \
        -mnesia dir \"/var/lib/echessd\" \
        -echessd_config /etc/echessd.conf \
        -echessd_privdir /usr/share/echessd \
        -noshell -noinput \
        -detached \
        -s mnesia \
        -s echessd' echessd
}

#
# Function that stops the daemon/service
#
do_stop()
{
    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    #   other if a failure occurred
    RANDOM=`date +%N`
    su --login --command \
        'erl -sname "echessd_stopper'$RANDOM'" \
        -noshell -noinput \
        -s echessd stop_remote' echessd > /dev/null 2>&1
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
    #
    # If the daemon can reload its configuration without
    # restarting (for example, when it is sent a SIGHUP),
    # then implement that here.
    #
    RANDOM=`date +%N`
    su --login --command \
        'erl -sname "echessd_hupper'$RANDOM'" \
        -noshell -noinput \
        -s echessd hup' echessd > /dev/null 2>&1
    return 0
}

do_status() {
    RANDOM=`date +%N`
    su --login --command \
        'erl -sname "echessd_pinger'$RANDOM'" \
        -noshell -noinput \
        -s echessd ping' echessd > /dev/null 2>&1
    RET=$?
    if [ $RET = 0 ]; then
        echo "$NAME is running." >&2
    else
        echo "$NAME is not running." >&2
    fi
    return $RET
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
       do_status && exit 0 || exit $?
       ;;
  reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	log_daemon_msg "Reloading $DESC" "$NAME"
	do_reload
	log_end_msg $?
	;;
  restart)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|restart|reload}" >&2
	exit 3
	;;
esac

:
